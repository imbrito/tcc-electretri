require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CriterionsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Criterion. As you add validations to Criterion, be sure to
  # adjust the attributes here as well.
  let(:user) { FactoryGirl.create(:user) }

  let(:project) { Project.create(:name => "Hello World", :description => "Pink and Brian, to domains the World!", 
      :cut => 0.75, :user_id => user.id) }

  let(:criterion) { Criterion.create(:name => "Criterion 01", :weight => 0.3, :preference => 0.6, :indifference => 0.4,
  :veto => 0.5, :direction => "Up", :project_id => project.id) }

  let(:valid_attributes) { FactoryGirl.build(:criterion).attributes }
  let(:invalid_attributes) { FactoryGirl.build(:invalid_criterion).attributes }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CriterionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) { sign_in(user) }

  describe "GET #new" do
    it "assigns a new criterion as @criterion" do
      get :new, {:project_id => project.to_param}, valid_session
      expect(assigns(:criterion)).to be_a_new(Criterion)
    end
  end

  describe "GET #edit" do
    it "assigns the requested criterion as @criterion" do
      get :edit, {:project_id => project.to_param, :id => criterion.to_param}, valid_session
      expect(assigns(:criterion)).to eq(criterion)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Criterion" do
        expect {
          post :create, {:project_id => project.to_param, :criterion => valid_attributes}, valid_session
        }.to change(Criterion, :count).by(1)
      end

      it "assigns a newly created criterion as @criterion" do
        post :create, {:project_id => project.to_param, :criterion => valid_attributes}, valid_session
        expect(Criterion.last.name).to eq(criterion.name)
        expect(Criterion.last.weight).to eq(criterion.weight)
        expect(Criterion.last.preference).to eq(criterion.preference)
        expect(Criterion.last.indifference).to eq(criterion.indifference)
        expect(Criterion.last.veto).to eq(criterion.veto)
        expect(Criterion.last.direction).to eq(criterion.direction)
      end

      it "redirects to the created @criterion" do
        post :create, {:project_id => project.to_param, :criterion => valid_attributes}, valid_session
        expect(response).to redirect_to(project_path(project))
      end
    end

    context "with invalid attributes" do
      it "assigns a newly created but unsaved criterion as @criterion" do
        post :create, {:project_id => project.to_param, :criterion => invalid_attributes}, valid_session
        expect(assigns(:criterion)).to be_a_new(Criterion)
      end

      it "re-renders the 'new' template" do
        post :create, {:project_id => project.to_param, :criterion => invalid_attributes}, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      it "updates the requested criterion" do
        put :update, {:project_id => project.to_param, :id => criterion.to_param, :criterion => valid_attributes}, valid_session
        criterion.reload
        expect(assigns(:criterion)).to eq(criterion)
      end

      it "assigns the requested criterion as @criterion" do
        put :update, {:project_id => project.to_param, :id => criterion.to_param, :criterion => valid_attributes}, valid_session
        expect(assigns(:criterion)).to eq(criterion)
      end

      it "redirects to the updated @criterion" do
        put :update, {:project_id => project.to_param, :id => criterion.to_param, :criterion => valid_attributes}, valid_session
        expect(response).to redirect_to(project_path(project))
      end
    end

    context "with invalid params" do
      it "assigns the criterion as @criterion" do
        put :update, {:project_id => project.to_param, :id => criterion.to_param, :criterion => invalid_attributes}, valid_session
        expect(assigns(:criterion)).to eq(criterion)
      end

      it "re-renders the 'edit' template" do
        put :update, {:project_id => project.to_param, :id => criterion.to_param, :criterion => invalid_attributes}, valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested criterion" do
      expect {
        delete :destroy, {:project_id => project.to_param, :id => criterion.to_param}, valid_session
      }.to change(Criterion, :count).by(0)
    end

    it "redirects to the @project" do
      delete :destroy, {:project_id => project.to_param, :id => criterion.to_param}, valid_session
      expect(response).to redirect_to(Project.last)
    end
  end
end